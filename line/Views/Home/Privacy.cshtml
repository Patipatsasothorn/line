@using Newtonsoft.Json

@{
    ViewData["Title"] = "Privacy Policy";

}
@{
    var tokens = Context.Request.Query["tokens"];
    var displayNames = Context.Request.Query["displayNames"];
    var tokenList = tokens.ToString().Split(','); // แยกค่า token ออก
    var displayNameList = displayNames.ToString().Split(','); // แยกค่า displayName ออก
}
@{
    var timeoutString = Context.Session.GetString("KeyTimeout");
    DateTime? timeout = null;
    if (!string.IsNullOrEmpty(timeoutString) && DateTime.TryParse(timeoutString, out var parsed))
    {
        timeout = parsed;
    }

    var isExpired = timeout == null || timeout <= DateTime.UtcNow;
}
@* <h3>หมดอายุ: @(timeout?.ToString("yyyy-MM-dd HH:mm:ss")) UTC</h3>
 *@
<div style ="text-align:center">
    <h3>line oa ที่เลือก</h3>
    <span>Display Name:</span>

    @for (int i = 0; i < tokenList.Length; i++)
    {
        <span style="display:none;">Token: @tokenList[i]</span>
        <span>@displayNameList[i],</span>
    }

</div>

<div class="container-fluid mt-4" style="height: 90vh;">
    <div class="modal fade" id="createVipModal" tabindex="-1" aria-labelledby="createVipModalLabel" aria-hidden="true">
    <div class="modal-dialog">

        <form id="createVipForm" class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createVipModalLabel">สร้าง แท้ก ใหม่</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>

            </div>
                

            <div class="modal-body">
                    <label for="vipNameInput" class="form-label">ชื่อ แท้ก:</label>
                <input type="text" class="form-control" id="vipNameInput" required>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                <button type="submit" class="btn btn-primary">เพิ่ม</button>
            </div>
        </form>
    </div>
</div>

    <div class="d-flex h-100 gap-4" style="overflow: hidden;padding:1rem 0px">
        <!-- รายการแชท -->
        <div style="width: 500px; background-color:white;padding:1rem;border-radius:16px;box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;" id="chat-list" class="border-end overflow-auto">
            <div class="d-flex align-items-center gap-2 mb-3">
                <input type="text" id="chatSearch" class="form-control" placeholder="🔍 ค้นหาชื่อแชท...">
                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addOATokenModal">+</button>

            </div>
            <!-- ดรอปดาวน์กรองวัน -->
            <div class="mb-3 d-flex align-items-center gap-2">
                <label for="dayFilter" class="form-label mb-0">กรองตามอายุแชท:</label>
                <select id="dayFilter" class="form-select form-select-sm" style="width: auto;">
                    <option value="">ทั้งหมด</option>
                    <option value="4">เกิน 4 วัน</option>
                    <option value="5">เกิน 5 วัน</option>
                    <option value="7">เกิน 7 วัน</option>
                </select>
                <button id="loadChatsBtn" class="btn btn-primary">โหลดแชท</button>

            </div>

            <div class="mb-2">

                <button class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#createVipModal">
                    ➕ สร้าง แท้ก
                </button>
            </div>
            <!-- VIP แชท -->
            <!-- ⬇ เพิ่มตรงนี้ -->
            <div id="customVipSections">

            </div>

            <ul class="list-group mb-3" id="vipChatItems">
            </ul>

            <!-- แชทธรรมดา -->
            <div class="mb-2 fw-bold text-secondary toggle-header" data-target="chatItems" style="cursor: pointer;">
                <i class="fa-solid fa-messages"></i> แชทธรรมดา
            </div>

            <ul class="list-group" id="chatItems">
            </ul>
        </div>
        <!-- หน้าจอแชท -->
        <div class="d-flex flex-column h-100 flex-grow-1" style="background-color:white;padding:1rem;border-radius:16px;box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;">
            <h5></h5>
            <input type="text" class="form-control" style="display:none" id="Botid" placeholder="Botid:">

            <div class="flex-grow-1 overflow-auto p-3" id="chat-messages" style="background-color: #f9f9f9;">

                <!-- ข้อความจะแสดงที่นี่ -->
            </div>
            <div class="p-2 border-top">
                <form id="reply-form" class="d-flex align-items-center gap-2" enctype="multipart/form-data">
                    <!-- แนบไฟล์ -->
                    <label for="reply-file" class="btn btn-outline-secondary d-flex align-items-center justify-content-center" title="แนบไฟล์">
                        <i class="bi bi-paperclip"></i>
                    </label>
                    <input type="file" id="reply-file" accept="image/*" style="display: none;">

                    <!-- ปุ่มเปิดเลือกสติกเกอร์ -->
                    <button type="button" class="btn btn-outline-secondary d-flex align-items-center justify-content-center" id="openStickerModal" title="เลือกสติกเกอร์">
                        <i class="bi bi-emoji-smile"></i>
                    </button>

                    <!-- ปุ่มเพิ่มข้อความล่วงหน้า (standard replies) -->
                    <button type="button" class="btn btn-outline-secondary d-flex align-items-center justify-content-center" id="openStandardReplyModal" title="เพิ่มข้อความล่วงหน้า">
                        <i class="fa-light fa-message-plus"></i>
                    </button>

                    <!-- พิมพ์ข้อความ -->
                    <input type="text" class="form-control" id="reply-text" placeholder="พิมพ์ข้อความตอบกลับ...">

                    <!-- ส่ง -->
                    <button type="submit" class="btn btn-primary">ส่ง</button>

                    <!-- ซ่อนข้อมูล -->
                    <input type="hidden" id="Userid">
                    <input type="hidden" id="Botid">
                </form>
            </div>

        </div>
    </div>
    <!-- Modal -->
    <!-- Modal -->
    <div class="modal fade" id="standardReplyModal" tabindex="-1" aria-labelledby="standardReplyModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="standardReplyModalLabel">Select item</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">

                    <!-- Tabs -->
                    <ul class="nav nav-tabs" id="replyTab" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="tab1-tab" data-bs-toggle="tab" data-bs-target="#tab1" type="button" role="tab" aria-controls="tab1" aria-selected="true">Standard replies</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="tab2-tab" data-bs-toggle="tab" data-bs-target="#tab2" type="button" role="tab" aria-controls="tab2" aria-selected="false">Card-based message</button>
                        </li>
                    </ul>

                    <div class="tab-content mt-3" id="replyTabContent">
                        <div class="tab-pane fade show active" id="tab1" role="tabpanel" aria-labelledby="tab1-tab">

                            <input type="hidden" id="Botidmodel" />

                            <!-- กล่องข้อความ -->
                            <textarea class="form-control" id="newMessage" rows="3" placeholder="พิมพ์ข้อความล่วงหน้า"></textarea>

                            <!-- ปุ่มบันทึก -->
                            <button class="btn btn-primary mt-2" id="saveMessageBtn">บันทึกข้อความ</button>

                            <!-- ตารางแสดงข้อความ -->
                            <table class="table table-striped mt-3" id="messagesTable">
                                <thead>
                                    <tr>
                                        <th>ข้อความ</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- ข้อมูลจะเติมจาก JS -->
                                </tbody>
                            </table>

                            <!-- ปุ่มส่งข้อความที่เลือก -->
                            <button class="btn btn-success" id="sendSelectedMessageBtn" disabled>ส่งข้อความ</button>

                        </div>

                        <div class="tab-pane fade" id="tab2" role="tabpanel" aria-labelledby="tab2-tab">
                            <div data-v-640368bd="">
                                <div data-v-640368bd="">
                                    <div class="d-flex justify-content-between align-items-center mb-2"><h2 class="mb-0">Card-based message</h2> </div> <div data-v-640368bd="" class="text-muted text-pre-line">
                                        Card-based messages let you present content over multiple cards in carousel format, packed into a single chat bubble.
                                        Users can swipe left and right to see your content at their own pace.
                                    </div> <hr>
                                </div> <div data-v-640368bd="" class="btn-toolbar justify-content-between my-4">
                                    <div data-v-640368bd="" class="btn-group"><!----></div> <div data-v-640368bd="" class="btn-group">
                                        <button data-v-640368bd="" disabled="disabled" type="button" class="w-min-120 btn btn-primary disabled">
                                            Save
                                        </button>
                                    </div>
                                </div> <div data-v-640368bd="">
                                    <hr class="my-4"> <section>
                                        <div class="form-group row w-max-800">
                                            <label class="col-sm-3 col-form-label text-right"><h4>ID</h4></label> <div class="col-sm-9 col-form-label">
                                                Issued after creation
                                            </div>
                                        </div> <div class="form-group row w-max-800"><label class="col-sm-3 col-form-label text-right"><h4>Item name</h4></label> <div class="col-sm-9"><div><input placeholder="Item name" data-vv-name="mainTitle" type="text" name="mainTitle" autocomplete="off" class="form-control w-100 mr-2" aria-required="true" aria-invalid="false"> <span class="float-right"><strong class="text-muted">0</strong><span class="">/100</span></span></div> <!----> <small class="form-text text-muted">The item name is shown in push notifications and in the user's chat list.</small></div></div>
                                    </section> <hr class="my-4">
                                </div> <div data-v-7f249f30="" data-v-640368bd="">
                                    <div data-v-7f249f30="">
                                        <h4 data-v-7f249f30="" class="mb-4">
                                            Card settings
                                            <i data-v-7f249f30="" class="lar la-question-circle ml-1"></i>
                                        </h4> <div data-v-7f249f30=""><div class="form-group row w-max-800"><label class="col-sm-3 col-form-label text-sm-right font-weight-light">Card type</label> <div class="col-sm-9"><div class="input-group align-items-center"><div class="mr-2"></div> <div class="input-group-append">
                                            <button type="button" id="SelectLine" class="btn btn-outline-secondary">Select</button></div></div></div></div> <!----> <!----></div>
                                    </div> <!---->
                                </div> <!----> <hr data-v-640368bd="" class="my-4"> <div data-v-640368bd="" class="d-flex justify-content-center p-4">
                                    <div data-v-640368bd="" class="p-4">
                                        <button data-v-640368bd="" disabled="disabled" type="button" class="px-5 btn btn-primary btn-undefined disabled">
                                            Save
                                        </button>
                                    </div>
                                </div> 
                            </div>
                        </div>

                        <div class="tab-pane fade" id="tab3" role="tabpanel" aria-labelledby="tab3-tab">
                            <p>แท็บ 3 ยังว่าง</p>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <!-- Modal structure ครบ -->
    <div class="modal fade" id="selectCardTypeModal" tabindex="-1" aria-labelledby="selectCardTypeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header flex-shrink-0">
                    <h5 class="mb-0">Select card type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body mh-100 overflow-hidden">
                    <div class="d-flex justify-content-center flex-wrap">
                        <div class="w-fix-160 m-2 cursor-pointer">
                            <div class="figure figure-grid">
                                <img src="https://static.line-scdn.net/biz-app/edge/manager/img/cardtypemessage/message_type_01_off@3x.png" class="figure-img" alt="Products">
                            </div>
                            <div class="kv-radio form-check custom-control custom-radio cursor-pointer form-check-inline">
                                <input id="05r3jacjnsy5" name="messageType" type="radio" class="custom-control-input">
                                <label for="05r3jacjnsy5" class="custom-control-label">Products</label>
                            </div>
                        </div>

                        <div class="w-fix-160 m-2 cursor-pointer">
                            <div class="figure figure-grid">
                                <img src="https://static.line-scdn.net/biz-app/edge/manager/img/cardtypemessage/message_type_02_off@3x.png" class="figure-img" alt="Places">
                            </div>
                            <div class="kv-radio form-check custom-control custom-radio cursor-pointer form-check-inline">
                                <input id="fk9uyhdhp5" name="messageType" type="radio" class="custom-control-input">
                                <label for="fk9uyhdhp5" class="custom-control-label">Places</label>
                            </div>
                        </div>

                        <div class="w-fix-160 m-2 cursor-pointer">
                            <div class="figure figure-grid">
                                <img src="https://static.line-scdn.net/biz-app/edge/manager/img/cardtypemessage/message_type_03_off@3x.png" class="figure-img" alt="People">
                            </div>
                            <div class="kv-radio form-check custom-control custom-radio cursor-pointer form-check-inline">
                                <input id="ae0frri39o6" name="messageType" type="radio" class="custom-control-input">
                                <label for="ae0frri39o6" class="custom-control-label">People</label>
                            </div>
                        </div>

                        <div class="w-fix-160 m-2 cursor-pointer">
                            <div class="figure figure-grid">
                                <img src="https://static.line-scdn.net/biz-app/edge/manager/img/cardtypemessage/message_type_04_off@3x.png" class="figure-img" alt="Pictures">
                            </div>
                            <div class="kv-radio form-check custom-control custom-radio cursor-pointer form-check-inline">
                                <input id="3ejxusumpgi" name="messageType" type="radio" class="custom-control-input">
                                <label for="3ejxusumpgi" class="custom-control-label">Pictures</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer d-flex flex-row-reverse flex-shrink-0">
                    <button disabled id="confirmCardTypeBtn" type="button" class="btn btn-primary">Select</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade" id="addToVipModal" tabindex="-1" aria-labelledby="addToVipModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <form id="addToVipForm" class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addToVipModalLabel">เพิ่มเข้า VIP</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="vipChatListContainer" class="row g-2"></div>
                </div>
                <div class="modal-footer">
                    <input type="hidden" id="currentVipTarget">
                    <button type="submit" class="btn btn-primary">เพิ่มเข้า แท้ก</button>
                </div>
            </form>
        </div>
    </div>
     <!-- Modal -->
<div class="modal fade" id="stickerModal" tabindex="-1" aria-labelledby="stickerModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-xl">
    <div class="modal-content" style="height: 80vh;">
      <div class="modal-header">
        <h5 class="modal-title" id="stickerModalLabel">เลือกสติกเกอร์</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body" style="overflow-y: auto; max-height: calc(80vh - 60px);">

        <!-- Nav tabs -->
        <ul class="nav nav-tabs" id="stickerTab" role="tablist"></ul>

        <!-- Tab panes -->
        <div class="tab-content pt-3" id="stickerTabContent" style="min-height: 50vh;"></div>

      </div>
    </div>
  </div>
</div>


    <div class="modal fade" id="addOATokenModal" tabindex="-1" aria-labelledby="addOATokenLabel" aria-hidden="true">
        <div class="modal-dialog">
            <form id="oaTokenForm" class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addOATokenLabel">เพิ่ม LINE OA Token</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <label for="oaTokenInput" class="form-label">Channel Access Token:</label>
                    <input type="text" class="form-control" id="oaTokenInput" required>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                    <button type="submit" class="btn btn-primary">บันทึก</button>
                </div>
            </form>
        </div>
    </div>

</div>
@section Scripts {
    <script>


        document.getElementById('saveMessageBtn').addEventListener('click', function () {
            const message = document.getElementById('newMessage').value.trim();
            const botId = document.getElementById('Botidmodel').value;

            if (!message) {
                alert("กรุณาพิมพ์ข้อความก่อนบันทึก");
                return;
            }

            fetch('/Home/SaveautoChat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Massage: message,
                    BotId: botId
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert("บันทึกข้อความสำเร็จ");
                    document.getElementById('newMessage').value = ""; // ล้าง textarea
                    // TODO: รีเฟรชตารางแสดงข้อความล่วงหน้าหลังบันทึกสำเร็จ (optional)
                } else {
                    alert("บันทึกไม่สำเร็จ: " + (result.message || "ไม่ทราบสาเหตุ"));
                }
            })
            .catch(error => {
                console.error('เกิดข้อผิดพลาดในการส่งข้อมูล:', error);
                alert("เกิดข้อผิดพลาดในการส่งข้อมูล");
            });
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <!-- JavaScript toggle logic -->
    <script>


             // JavaScript (ใช้ Bootstrap 5)
        document.getElementById('openStandardReplyModal').addEventListener('click', function () {
            const botIdValue = document.getElementById('Botid').value;
            document.getElementById('Botidmodel').value = botIdValue;

            // โหลดข้อความจากฐานข้อมูล
            fetch(`/Home/GetAutoChatMessages?botId=${encodeURIComponent(botIdValue)}`)
                .then(res => res.json())
                .then(data => {
                    const tbody = document.querySelector('#messagesTable tbody');
                    tbody.innerHTML = ''; // เคลียร์ข้อมูลเก่า

                    data.forEach(row => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `<td>${row.message}</td>`;
                        tr.style.cursor = 'pointer';

                        tr.addEventListener('click', function () {
                            // ล้าง selection เก่า
                            document.querySelectorAll('#messagesTable tbody tr').forEach(r => r.classList.remove('table-primary'));

                            tr.classList.add('table-primary'); // ไฮไลต์แถวที่เลือก
                            document.getElementById('sendSelectedMessageBtn').disabled = false;
                            document.getElementById('sendSelectedMessageBtn').dataset.message = row.message;
                        });

                        tbody.appendChild(tr);
                    });

                    // เปิด Modal หลังโหลดเสร็จ
                    var myModal = new bootstrap.Modal(document.getElementById('standardReplyModal'), {});
                    myModal.show();
                })
                .catch(err => {
                    console.error('Error loading messages:', err);
                });
        });

        // เมื่อคลิกปุ่มส่งข้อความ
        document.getElementById('sendSelectedMessageBtn').addEventListener('click', function () {
            const message = this.dataset.message;
            document.getElementById('reply-text').value = message;
            this.disabled = true; // ปิดปุ่มอีกครั้ง
                    // ปิด modal ด้วย Bootstrap API โดยอ้างจาก id
        const modalElement = document.getElementById('standardReplyModal');
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        if (modalInstance) {
            modalInstance.hide();
        }

        });
        document.getElementById('openStickerModal').addEventListener('click', function () {
          var myModal = new bootstrap.Modal(document.getElementById('stickerModal'), {});
          myModal.show();
        });

                                        // เพิ่ม toggle ย่อ/ขยาย
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('toggle-header')) {
                const targetId = e.target.getAttribute('data-target');
                if (targetId) {
                    const list = document.getElementById(targetId);
                    if (list) list.classList.toggle('d-none');
                }
            }
        });
    </script>

    <script>
        document.querySelectorAll(".toggle-header").forEach(header => {
            header.addEventListener("click", () => {
                const targetId = header.getAttribute("data-target");
                const targetList = document.getElementById(targetId);
                if (targetList) {
                    targetList.style.display = targetList.style.display === "none" ? "block" : "none";
                }
            });
        });
    </script>
    <script>
            document.addEventListener("DOMContentLoaded", function() {
         const selectLineBtn = document.getElementById('SelectLine');

                if (selectLineBtn) {
                    selectLineBtn.addEventListener('click', function () {
                        const modal = new bootstrap.Modal(document.getElementById('selectCardTypeModal'));
                        modal.show();
                    });
                }
            fetch('/Home/GetChatHistories', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ displayNames: @Html.Raw(JsonConvert.SerializeObject(displayNameList)) })
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Chats loaded", data);
                    // แสดงผล หรือรอให้ SignalR push ข้อมูลมา
                })
                .catch(err => console.error(err));

        const isExpired = @isExpired.ToString().ToLower();
                    document.getElementById("loadChatsBtn").addEventListener("click", function() {
                // สมมติ displayNameList ถูกเซ็ตมาจากฝั่ง Razor แล้ว
                const displayNameList = @Html.Raw(JsonConvert.SerializeObject(displayNameList));

                fetch('/Home/GetChatHistories', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ displayNames: displayNameList })
                })
                .then(response => response.json())
                .then(data => {
                    console.log("Chats loaded", data);
                    // ตรงนี้ถ้าจะทำอะไรต่อ เช่น แสดงผล หรือรอ SignalR push ข้อมูล
                })
                .catch(err => console.error(err));
            });
        if (isExpired) {
            const replyInput = document.getElementById("reply-text");
            const replySubmitBtn = document.querySelector("#reply-form button[type='submit']");
            const replyFileInput = document.getElementById("reply-file"); // input ไฟล์

            if (replyInput) {
                replyInput.disabled = true;
                replyInput.placeholder = "หมดอายุการใช้งาน ไม่สามารถพิมพ์ข้อความได้";
            }
            if (replySubmitBtn) replySubmitBtn.disabled = true;
            if (replyFileInput) replyFileInput.disabled = true;

            const createVipBtn = document.querySelector("button[data-bs-target='#createVipModal']");
            if (createVipBtn) createVipBtn.disabled = true;
        }
    });
        let currentUserId = null;
        let chatHistories = {}; // เก็บข้อความแยกตาม userId+botDisplayName

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

               connection.on("ReceiveMessage", function (userName, message, pictureUrl, timestamp, userId, oaName, BotId, isReply) {
            const fullKey = `${userId}-${BotId.replace(/\s+/g, '')}`;

            if (!chatHistories[fullKey]) {
                chatHistories[fullKey] = [];
            }

            let messageContent;

            // ตรวจสอบว่า message เป็น '[ส่งรูปภาพ]' ให้ใช้ pictureUrl แสดงรูปแทน
            if (message === '[ส่งรูปภาพ]') {
                messageContent = `<img src="${pictureUrl}" alt="image" style="max-width: 500px; max-height: 350px; border-radius: 4px;" class="clickable-image" data-fullsize="${pictureUrl}" />`;
            } else {
                // ตรวจสอบว่า message เป็น URL รูปภาพปกติหรือไม่
                let isImage = /\.(jpg|jpeg|png|gif|webp)$/i.test(message);

                if (isReply) {
                    messageContent = isImage
                        ? `<img src="${message}" alt="image" style="max-width: 500px; max-height: 350px; border-radius: 4px;" class="clickable-image" data-fullsize="${message}" />`
                        : `<div class="bg-success text-white rounded p-2 px-3 shadow-sm" style="max-width: 300px; margin-left: auto;">${message}</div>`;
                } else {
                    messageContent = isImage
                        ? `<img src="${message}" alt="image" style="max-width: 500px; max-height: 350px; border-radius: 4px;" class="clickable-image" data-fullsize="${message}" />`
                        : `<div class="bg-light rounded p-2 px-3 shadow-sm" style="max-width: 300px;">${message}</div>`;
                }
            }

            const profileImage = !isReply
                ? `<img src="${pictureUrl}" class="rounded-circle me-2 flex-shrink-0" width="40" height="40" alt="${userName}">`
                : "";

            const item = `
                <div class="d-flex mb-3 ${isReply ? 'justify-content-end' : ''}">
                    ${profileImage}
                    <div>
                        <div class="fw-bold mb-1">${userName}</div>
                        ${messageContent}
                        <small class="text-muted text-end" style="white-space: nowrap;">${timestamp}</small>
                    </div>
                </div>
            `;

            chatHistories[fullKey].push(item);

            const selectedKey = document.getElementById("Userid").value + "-" + BotId.replace(/\s+/g, '');
            const chatHeaderText = document.querySelector("h5").textContent.trim();
            const normalizedOaName = BotId.replace(/\s+/g, '');
            const normalizedHeader = chatHeaderText.replace(/\s+/g, '');

            if (currentUserId === userId && normalizedHeader === normalizedOaName) {
                document.getElementById("chat-messages").innerHTML += item;
            }

            // เพิ่ม event click สำหรับรูปภาพใหม่
            let clickableImages = document.querySelectorAll('.clickable-image');
            clickableImages.forEach(image => {
                image.addEventListener('click', function () {
                    const fullSizeImageUrl = image.getAttribute('data-fullsize');
                    openImageInModal(fullSizeImageUrl);
                });
            });
        });
            // ฟังก์ชันเปิดรูปใน modal
        function openImageInModal(imageUrl) {
            const modalHtml = `
                <div class="modal fade" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="imageModalLabel">รูปภาพ</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <img src="${imageUrl}" alt="Full Size Image" class="img-fluid" />
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // เพิ่ม modal ไปที่ body
            document.body.insertAdjacentHTML('beforeend', modalHtml);

            // แสดง modal
            const modal = new bootstrap.Modal(document.getElementById('imageModal'));
            modal.show();

            // ลบ modal หลังจากปิด
            document.getElementById('imageModal').addEventListener('hidden.bs.modal', function () {
                document.getElementById('imageModal').remove();
            });
        }
        const getLastNonEmptyLine = (text) => {
    return text
        .split(/\r?\n/)
        .map(line => line.trim())
        .filter(line => line.length > 0)
        .pop() || "";
};

        connection.on("UpdateChatList", function (userId, displayName, pictureUrl, lastMessage, timestamp, botDisplayName, BotId) {
            const displayNameList = @Html.Raw(Json.Serialize(displayNameList));
                        // ✨ ลบช่องว่างออกจาก botDisplayName เพื่อใช้เปรียบเทียบ
            const cleanedBotName = botDisplayName.replace(/\s+/g, '');

            // ✨ ตรวจสอบว่าชื่อ bot นี้อยู่ใน displayNameList หรือไม่
            const isMatched = displayNameList.some(name => name.replace(/\s+/g, '') === cleanedBotName);

            // ❌ ถ้าไม่ตรงกับชื่อที่กำหนดไว้ ก็ไม่ต้องทำอะไร
            if (!isMatched) return;
            const chatKey = `${userId}-${botDisplayName.replace(/\s+/g, '')}`;
            const isImage = /\.(jpg|jpeg|png|gif|webp)$/i.test(lastMessage);
            const cleanMessage = getLastNonEmptyLine(lastMessage);
            const messageContent = isImage
                ? `<div class="text-muted text-truncate" style="max-width: 180px;" title="ส่งรูปภาพ">ส่งรูปภาพ</div>`
                : `<div class="text-muted text-truncate" style="max-width: 180px;" title="${cleanMessage}">${cleanMessage}</div>`;

            // ตรวจสอบในกลุ่ม VIP
            let vipLi = null;
            const vipLists = document.querySelectorAll('ul[id^="vipGroup-"]');
            for (const ul of vipLists) {
                const li = ul.querySelector(`#chat-${chatKey}`);
                if (li) {
                    vipLi = li;
                    break;
                }
            }

            const updateListItem = (li) => {
                const messageContainer = li.querySelector('.fw-bold').parentElement;

                // ลบ div.text-muted ทั้งหมด (ข้อความเก่า)
                messageContainer.querySelectorAll('.text-muted').forEach(el => el.remove());

                messageContainer.insertAdjacentHTML('beforeend', messageContent);

                const timeSmall = li.querySelector('small.text-muted:last-child');
                if (timeSmall) {
                    timeSmall.textContent = timestamp;
                }

                // อัปเดตตัวนับข้อความใหม่
                let badge = li.querySelector('.unread-count-badge');
                if (!badge) {
                    // สร้าง badge ใหม่
                    badge = document.createElement('span');
                    badge.classList.add('unread-count-badge');
        badge.style.cssText = `
            position: absolute;
            bottom: 8px;
            right: 8px;
            background-color: #28a745;
            color: white;
            border-radius: 50%;
            padding: 2px 7px;
            font-size: 12px;
            font-weight: bold;
            user-select: none;
            min-width: 20px;
            text-align: center;
            line-height: 1;
        `;
                    li.style.position = 'relative'; // เพื่อให้ badge อยู่ในตำแหน่งที่ถูกต้อง
                    li.appendChild(badge);
                    badge.textContent = "1";
                } else {
                    // เพิ่มค่าตัวนับขึ้นทีละ 1
                    let count = parseInt(badge.textContent) || 0;
                    badge.textContent = count + 1;
                }
            };

            if (vipLi) {
                updateListItem(vipLi);
                return;
            }

            const container = document.getElementById("chatItems");
            const existingLi = container.querySelector(`#chat-${chatKey}`);
            if (existingLi) {
                updateListItem(existingLi);
                return;
            }

            const itemHtml = `
                <li class="list-group-item d-flex align-items-start justify-content-between" id="chat-${chatKey}" style="cursor: pointer; position: relative;">
                    <div class="d-flex">
                        <img src="${pictureUrl}" class="rounded-circle me-2 flex-shrink-0" width="40" height="40" alt="${displayName}">
                        <div>
                            <div class="fw-bold">
                                ${displayName}
                                <span style="display:block">มาจาก ${botDisplayName}</span>
                                <br><small style="display:none" class="text-muted">BotId: ${BotId}</small>
                            </div>
                            ${messageContent}
                        </div>
                    </div>
                    <div class="text-end">
                        <input type="checkbox" class="form-check-input make-vip-checkbox" style="display:none;"
                               data-user-id="${userId}" data-bot-name="${botDisplayName}" data-bot-id="${BotId}">
                        <small class="text-muted" style="white-space: nowrap;">${timestamp}</small>
                    </div>
                </li>
            `;
            container.insertAdjacentHTML('beforeend', itemHtml);

            const li = document.getElementById(`chat-${chatKey}`);

            // เพิ่ม event ล้าง badge ตอนคลิก
            li.addEventListener('click', function() {
                const badge = this.querySelector('.unread-count-badge');
                if (badge) {
                    badge.remove();
                }

                // handleChatClick.apply(this, arguments); // เรียก handler เดิมด้วย
            });

            attachVipCheckboxHandlers?.();
        });

                        connection.start().catch(function (err) {
            return console.error(err.toString());
        });
        function attachVipCheckboxHandlers() {
            document.querySelectorAll('.make-vip-checkbox').forEach(function (checkbox) {
                if (!checkbox.dataset.bound) {
                    checkbox.dataset.bound = true; // ป้องกันผูกซ้ำ
                    checkbox.addEventListener('change', function () {
                        if (this.checked) {
                            // เมื่อเลือก VIP
                            const confirmed = confirm('คุณต้องการเพิ่มแชทนี้เป็น VIP หรือไม่?');
                            if (confirmed) {
                                const listItem = this.closest('li');
                                document.getElementById('vipChatItems').appendChild(listItem);
                            } else {
                                this.checked = false; // หากไม่ยืนยัน ให้ติ๊กออก
                            }
                        } else {
                            // เมื่อเอาออกจาก VIP
                            const confirmed = confirm('คุณต้องการเอาแชทนี้ออกจากการเป็น VIP หรือไม่?');
                            if (confirmed) {
                                const listItem = this.closest('li');
                                document.getElementById('chatItems').appendChild(listItem); // หรือเอาออกจาก VIP
                            } else {
                                this.checked = true; // หากไม่ยืนยัน ให้ติ๊กไว้
                            }
                        }
                    });
                }
            });
        }


    </script>
    <script>
        document.getElementById("chatItems").addEventListener("click", handleChatClick);
        document.getElementById("vipChatItems").addEventListener("click", handleChatClick);
              // สมมติ vipMap เก็บสถานะ VIP ของแต่ละ chatKey (เช่น userId-botDisplayName)
        const vipMap = new Map();

        document.getElementById('createVipForm').addEventListener('submit', function (e) {
            e.preventDefault();
            const vipName = document.getElementById('vipNameInput').value.trim();
            if (vipName) {
                const sectionContainer = document.getElementById('customVipSections');

                const headerDiv = document.createElement('div');
                headerDiv.className = 'fw-bold text-warning mt-4 mb-2 d-flex align-items-center toggle-header';
                headerDiv.style.cursor = 'pointer';
                const sectionId = `vipGroup-${vipName.replace(/\s+/g, '-')}`;
                headerDiv.setAttribute('data-target', sectionId);
                headerDiv.innerHTML = `<i class="fa-solid fa-tag me-2"></i> ${vipName} `;

                // badge แสดงจำนวนแชท
                const badgeSpan = document.createElement('span');
                badgeSpan.className = 'badge bg-secondary ms-2 chat-count';
                badgeSpan.textContent = '0 แชท';
                headerDiv.appendChild(badgeSpan);

                // ปุ่มเพิ่มแชทเข้า VIP
                const addBtn = document.createElement('button');
                addBtn.className = 'btn btn-sm btn-outline-success ms-2';
                addBtn.innerHTML = '+';
                addBtn.setAttribute('data-vip-name', vipName);
                addBtn.onclick = function () {
                    openAddToVipModal(vipName);
                };
                headerDiv.appendChild(addBtn);

                // ปุ่มลบ VIP group
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'btn btn-sm btn-outline-danger ms-2';
                deleteBtn.innerHTML = '<i class="fa-solid fa-trash"></i>';
                deleteBtn.title = `ลบ VIP '${vipName}' และย้ายแชทกลับช่องปกติ`;
                deleteBtn.onclick = function () {
                    if (confirm(`ต้องการลบ VIP '${vipName}' และย้ายแชททั้งหมดในกลุ่มนี้กลับช่องปกติหรือไม่?`)) {
                        const ul = document.getElementById(sectionId);
                        const container = document.getElementById('chatItems');

                        if (ul) {
                            const chatItems = ul.querySelectorAll('li.list-group-item');
                            chatItems.forEach(li => {
                                // ข้ามข้อความ "ไม่มีรายการ"
                                if (li.classList.contains('text-muted') && li.textContent.trim() === 'ไม่มีรายการ') return;

                                // ซ่อน checkbox และยกเลิกติ๊ก
                                const checkbox = li.querySelector('input.form-check-input.make-vip-checkbox');
                                if (checkbox) {
                                    checkbox.checked = false;
                                    checkbox.style.display = 'none';
                                }

                                // ลบสถานะ VIP ใน vipMap
                                const chatKey = li.id.replace('chat-', '');
                                if (vipMap.has(chatKey)) {
                                    vipMap.delete(chatKey);
                                }

                                container.appendChild(li);
                            });

                            ul.remove();
                        }
                        headerDiv.remove();
                    }
                };
                headerDiv.appendChild(deleteBtn);

                // สร้าง ul สำหรับเก็บแชทใน VIP group
                const ul = document.createElement('ul');
                ul.className = 'list-group mb-3';
                ul.id = sectionId;

                // ข้อความ "ไม่มีรายการ" เมื่อยังไม่มีแชท
                const empty = document.createElement('li');
                empty.className = 'list-group-item text-muted';
                empty.textContent = 'ไม่มีรายการ';
                ul.appendChild(empty);

                // ใส่ header และ ul ลงใน container
                sectionContainer.appendChild(headerDiv);
                sectionContainer.appendChild(ul);

                // เคลียร์ input และปิด modal
                document.getElementById('vipNameInput').value = '';
                bootstrap.Modal.getInstance(document.getElementById('createVipModal')).hide();
            }
        });


                                        // เปิด modal เพื่อเพิ่มแชทเข้า VIP
        function openAddToVipModal(vipName) {
            document.getElementById("currentVipTarget").value = vipName;
            document.getElementById("addToVipModalLabel").textContent = `เพิ่มเข้า VIP: ${vipName}`;

            const container = document.getElementById("vipChatListContainer");
            container.innerHTML = '';

            const chatItems = document.querySelectorAll('#chatItems .list-group-item');

            chatItems.forEach(item => {
                const displayName = item.querySelector('.fw-bold').childNodes[0].textContent.trim();
                const imgSrc = item.querySelector('img').src;
                const checkbox = item.querySelector('input[type="checkbox"]');
                const userId = checkbox.dataset.userId;
                const botDisplayName = checkbox.dataset.botName;

                const col = document.createElement('div');
                col.className = 'col-md-4';

                col.innerHTML = `
                    <div class="d-flex align-items-center border rounded p-2">
                        <img src="${imgSrc}" width="40" height="40" class="rounded-circle me-2" />
                        <span class="me-auto">${displayName}</span>
                        <span class="text-muted ms-2">${botDisplayName}</span>
                        <input type="checkbox" class="form-check-input vip-select-checkbox"
                               data-user-id="${userId}" data-display-name="${displayName}"
                               data-img="${imgSrc}" data-bot-name="${botDisplayName}">
                    </div>
                `;

                container.appendChild(col);
            });

            new bootstrap.Modal(document.getElementById("addToVipModal")).show();
        }

        // ย้ายรายการเข้า VIP
document.getElementById('addToVipForm').addEventListener('submit', function (e) {
    e.preventDefault();

    const vipName = document.getElementById("currentVipTarget").value;
    const listId = `vipGroup-${vipName.replace(/\s+/g, '-')}`;
    const ul = document.getElementById(listId);

    ul.querySelectorAll('.text-muted').forEach(el => el.remove());

    const checkboxes = document.querySelectorAll('.vip-select-checkbox:checked');
    checkboxes.forEach(cb => {
        const userId = cb.dataset.userId;
        const name = cb.dataset.displayName;
        const img = cb.dataset.img;
        const botName = cb.dataset.botName;

        const chatKey = `${userId}-${botName.replace(/\s+/g, '')}`;
        const originalLi = document.querySelector(`#chatItems li input[data-user-id="${userId}"]`)?.closest('li');

        if (originalLi) {
            originalLi.remove();

            const cloneLi = originalLi.cloneNode(true);
            cloneLi.id = `chat-${chatKey}`;

            const cloneCheckbox = cloneLi.querySelector('input[type="checkbox"]');
            if (cloneCheckbox) {
                cloneCheckbox.checked = true;
                cloneCheckbox.style.display = 'none';
            }

            // เพิ่มปุ่มลบออกจาก VIP
            const removeBtn = document.createElement('button');
            removeBtn.className = 'btn btn-sm btn-outline-danger ms-2';
            removeBtn.textContent = 'ลบออกจาก แท้ก';
            removeBtn.onclick = function (e) {
                e.stopPropagation();
                moveChatBackToNormal(userId, botName, cloneLi);
            };
            cloneLi.querySelector('.text-end')?.appendChild(removeBtn);

            cloneLi.addEventListener('click', handleChatClick);
            ul.appendChild(cloneLi);
        }
    });

    const headerDiv = document.querySelector(`div[data-target="${listId}"]`);
    if (headerDiv) {
        const count = ul.querySelectorAll('li:not(.text-muted)').length;
        const badge = headerDiv.querySelector('.chat-count');
        if (badge) {
            badge.textContent = `${count} แชท`;
        }
    }

    bootstrap.Modal.getInstance(document.getElementById("addToVipModal")).hide();
});

    function moveChatBackToNormal(userId, botDisplayName, liElement) {
            const container = document.getElementById("chatItems");
            const chatKey = `${userId}-${botDisplayName.replace(/\s+/g, '')}`;

            // ลบจาก VIP
            const vipUl = liElement.closest('ul');
            liElement.remove();

            // คืน checkbox (ซ่อน)
            const checkbox = liElement.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = false;
                checkbox.style.display = 'none';  // ซ่อน checkbox
            }

            // ลบปุ่มลบออกจาก VIP
            liElement.querySelector('button.btn-outline-danger')?.remove();

            // ย้ายกลับไปที่ chatItems
            container.appendChild(liElement);

            // อัปเดต badge
            const sectionId = vipUl.id;
            const headerDiv = document.querySelector(`div[data-target="${sectionId}"]`);
            if (headerDiv) {
                const count = vipUl.querySelectorAll('li').length;
                const badge = headerDiv.querySelector('.chat-count');
                if (badge) {
                    badge.textContent = `${count} แชท`;
                }

                // ถ้าไม่มีเหลือเลย ใส่ข้อความ "ไม่มีรายการ"
                if (count === 0) {
                    const empty = document.createElement('li');
                    empty.className = 'list-group-item text-muted';
                    empty.textContent = 'ไม่มีรายการ';
                    vipUl.appendChild(empty);
                }
            }
        }
        function handleChatClick(e) {
            let target = e.target;

            // หา parent <li>
            while (target && target.tagName !== "LI") {
                target = target.parentNode;
            }

            if (target) {
                const checkbox = target.querySelector("input.make-vip-checkbox");
                if (!checkbox) return;

                const userId = checkbox.getAttribute("data-user-id");
                const botName = checkbox.getAttribute("data-bot-name");
                const botId = checkbox.getAttribute("data-bot-id");

                console.log('userId:', userId);
                console.log('botName:', botName);
                console.log('botId:', botId);
                document.getElementById('Botidmodel').value = botName;

                const fullKey = `${userId}-${botId.replace(/\s+/g, '')}`;

                currentUserId = userId;
                document.getElementById("Userid").value = userId;
                document.getElementById("Botid").value = botId;

                document.querySelector("h5").textContent = botName;

                document.getElementById("chat-messages").innerHTML = "";  // ล้างข้อความเก่า

                // เรียก API ที่ /Home/ReceiveMessageHistories
                fetch('/Home/ReceiveMessageHistories', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        data: [userId],  // ส่ง array ตามรูปแบบ model
                        userId: userId,
                        botId: botId
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(result => {
                    if (result.success) {
                        // กรณีมี chatHistories เก็บไว้ใน JS แล้ว เอามาแสดง
                        if (chatHistories[fullKey]) {
                            chatHistories[fullKey].forEach(msg => {
                                document.getElementById("chat-messages").innerHTML += msg;
                                document.getElementById("chat-messages").scrollTop = document.getElementById("chat-messages").scrollHeight;

                            });
                        } else {
                            console.log('No chat history cached for:', fullKey);
                            // อาจแสดงข้อความว่างหรือโหลดใหม่จาก SignalR
                        }
                    } else {
                        console.error("Failed to load chat history");
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                });
            }
        }

         function loadChatHistory(userId, botId) {
            fetch(`/chat-history?userId=${userId}&botId=${botId}`)
                .then(res => res.json())
                .then(data => {
                    const chatBox = document.getElementById("chat-messages");
                    chatBox.innerHTML = "";

                    const fullKey = `${userId}-${botId.replace(/\s+/g, '')}`;
                    chatHistories[fullKey] = [];

                    data.forEach(chat => {
                        const isAdmin = chat.DisplayName === "Admin"; // หรือเช็คจากชื่อคุณ
                        const timestamp = chat.Timestamp;

                        const messageHtml = `
                            <div class="d-flex ${isAdmin ? 'justify-content-end' : 'justify-content-start'} mb-3">
                                <div>
                                    <div class="fw-bold mb-1 ${isAdmin ? 'text-end' : 'text-start'}">
                                        ${isAdmin ? 'คุณ' : chat.DisplayName}
                                    </div>
                                    <div class="${isAdmin ? 'bg-success text-white' : 'bg-light text-dark'} rounded p-2 px-3 shadow-sm" style="max-width: 300px;">
                                        ${chat.Message}
                                        <div class="${isAdmin ? 'text-end' : 'text-start'}">
                                            <small class="${isAdmin ? 'text-white-50' : 'text-muted'}">${timestamp}</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;

                        chatBox.innerHTML += messageHtml;
                        chatHistories[fullKey].push(messageHtml);
                    });
                    chatBox.scrollTop = chatBox.scrollHeight;

                    currentUserId = userId;
                })
                .catch(err => {
                    console.error("โหลดประวัติแชทล้มเหลว:", err);
                    alert("ไม่สามารถโหลดประวัติแชทได้");
                });
        }

        document.getElementById("reply-form").addEventListener("submit", function (e) {
            e.preventDefault();

            sendReply();
        });

        document.getElementById("reply-file").addEventListener("change", function () {
            if (this.files.length > 0) {
                sendReply();
            }
        });

        function sendReply() {
            const message = document.getElementById("reply-text").value.trim();
            const userId = document.getElementById("Userid").value;
            const botId = document.getElementById("Botid").value;
            const fileInput = document.getElementById("reply-file");
            const file = fileInput.files[0];

            if (!userId || !botId) {
                alert("กรุณาเลือกแชทก่อนส่งข้อความ");
                return;
            }

            if (!message && !file) {
                alert("กรุณาพิมพ์ข้อความหรือเลือกไฟล์ก่อนส่ง");
                return;
            }

            const formData = new FormData();
            formData.append("userId", userId);
            formData.append("message", message);
            formData.append("botId", botId);

            if (file) {
                formData.append("imageFile", file);
            }

            fetch("/send-reply", {
                method: "POST",
                body: formData
            }).then(res => {
                if (res.ok) {
                    document.getElementById("reply-text").value = "";
                    fileInput.value = "";

                    const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                    let contentHtml = "";
                    if (file) {
                        // แสดงรูปภาพในแชท
                        const imageUrl = URL.createObjectURL(file);
                        contentHtml = `<img src="${imageUrl}" alt="sent image" style="max-width: 300px; border-radius: 8px;">`;
                    } else {
                        // แสดงข้อความปกติ
                        contentHtml = message;
                    }

                    const item = `
                        <div class="d-flex justify-content-end mb-3">
                            <div>
                                <div class="fw-bold mb-1 text-end">คุณ</div>
                                <div class="bg-success text-white rounded p-2 px-3 shadow-sm" style="max-width: 300px;">
                                    ${contentHtml}
                                    <div class="text-end">
                                        <small class="text-white-50">${timestamp}</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;

                    const fullKey = `${userId}-${botId.replace(/\s+/g, '')}`;
                    if (!window.chatHistories) window.chatHistories = {};
                    if (!chatHistories[fullKey]) {
                        chatHistories[fullKey] = [];
                    }
                    chatHistories[fullKey].push(item);

                    if (window.currentUserId === userId) {
                        document.getElementById("chat-messages").innerHTML += item;
                    }
                } else {
                    alert("ไม่สามารถตอบกลับได้");
                }
            }).catch(err => {
                console.error("เกิดข้อผิดพลาดในการส่งข้อความ:", err);
                alert("เกิดข้อผิดพลาดในการส่งข้อความ");
            });
        }

                const stickerPackages = [
          {
            packageId: "11537", packageName: "Brown & Friends",
            stickers: ["52002730","52002731","52002732","52002733","52002734","52002735","52002736",
                       "52002737","52002738","52002739","52002740","52002741","52002742","52002743",
                       "52002744","52002745","52002746","52002747","52002748","52002749","52002750",
                       "52002751","52002752","52002753","52002754","52002755","52002756","52002757",
                       "52002758","52002759","52002760","52002761","52002762","52002763","52002764"]
          },
          { packageId: "446", packageName: "LINE Characters", stickers: ["1988", "1989", "1990", "1991", "1992", "1993"] },
          { packageId: "789", packageName: "Cony & Brown", stickers: ["10818", "10819", "10820", "10821", "10822", "10823"] },
          { packageId: "6136", packageName: "Sally", stickers: ["10551375", "10551376", "10551377", "10551378", "10551379", "10551380"] },
          { packageId: "6325", packageName: "Usagyuuun", stickers: ["10979914", "10979915", "10979916", "10979917", "10979918", "10979919", "10979920", "10979921", "10979922", "10979923", "10979924", "10979925", "10979926", "10979927", "10979928", "10979929"] },
          { packageId: "8515", packageName: "Moon", stickers: ["16581250", "16581251", "16581252", "16581253", "16581254", "16581255"] },
          { packageId: "607", packageName: "James", stickers: ["120718", "120719", "120720", "120721", "120722", "120723"] },
          { packageId: "8522", packageName: "Boss", stickers: ["16581270", "16581271", "16581272", "16581273", "16581274", "16581275"] }
        ];

        function loadStickers() {
          const tabList = document.getElementById('stickerTab');
          const tabContent = document.getElementById('stickerTabContent');
          tabList.innerHTML = '';
          tabContent.innerHTML = '';

          stickerPackages.forEach((pkg, index) => {
            // สร้าง Tab
            const tab = document.createElement('li');
            tab.className = 'nav-item';
            tab.role = 'presentation';
            tab.innerHTML = `
              <button class="nav-link ${index === 0 ? 'active' : ''}" id="tab-${pkg.packageId}"
                      data-bs-toggle="tab" data-bs-target="#content-${pkg.packageId}"
                      type="button" role="tab" aria-controls="content-${pkg.packageId}"
                      aria-selected="${index === 0}">
                ${pkg.packageName}
              </button>
            `;
            tabList.appendChild(tab);

            // สร้าง Tab content
            const content = document.createElement('div');
            content.className = `tab-pane fade ${index === 0 ? 'show active' : ''}`;
            content.id = `content-${pkg.packageId}`;
            content.role = 'tabpanel';
            content.setAttribute('aria-labelledby', `tab-${pkg.packageId}`);

            const grid = document.createElement('div');
            grid.id = `stickerGrid-${pkg.packageId}`;
            grid.className = 'd-flex flex-wrap gap-3 justify-content-center';

            pkg.stickers.forEach(stickerId => {
              const img = document.createElement('img');
              img.src = `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerId}/ANDROID/sticker.png`;
              img.alt = 'Sticker';
              img.style.width = '80px';
              img.style.cursor = 'pointer';
              img.dataset.packageId = pkg.packageId;
              img.dataset.stickerId = stickerId;

              img.addEventListener('click', onStickerClick);

              grid.appendChild(img);
            });

            content.appendChild(grid);
            tabContent.appendChild(content);
          });
        }

        function onStickerClick() {
          const packageId = this.dataset.packageId;
          const stickerId = this.dataset.stickerId;
          const userId = document.getElementById('Userid')?.value;
          const botId = document.getElementById('Botid')?.value;

          if (!userId || !botId) {
            alert("กรุณาเลือกแชทก่อนส่งสติกเกอร์");
            return;
          }

          const formData = new FormData();
          formData.append("userId", userId);
          formData.append("botId", botId);
          formData.append("stickerPackageId", packageId);
          formData.append("stickerId", stickerId);

          fetch("/send-reply", {
            method: "POST",
            body: formData
          }).then(res => {
            if (res.ok) {
              // alert('ส่งสติกเกอร์สำเร็จ');
              const modal = bootstrap.Modal.getInstance(document.getElementById('stickerModal'));
              modal.hide();
              const stickerImgUrl = `https://stickershop.line-scdn.net/stickershop/v1/sticker/${stickerId}/ANDROID/sticker.png`;
              const timestamp = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

              const item = `
                <div class="d-flex justify-content-end mb-3">
                  <div>
                    <div class="fw-bold mb-1 text-end">คุณ</div>
                    <div class="bg-success rounded p-2 px-3 shadow-sm" style="max-width: 120px;">
                      <img src="${stickerImgUrl}" alt="Sticker" class="img-fluid" />
                      <div class="text-end"><small class="text-white-50">${timestamp}</small></div>
                    </div>
                  </div>
                </div>`;

              const fullKey = `${userId}-${botId.replace(/\s+/g, '')}`;
              if (!chatHistories[fullKey]) chatHistories[fullKey] = [];
              chatHistories[fullKey].push(item);

              if (currentUserId === userId) {
                document.getElementById("chat-messages").innerHTML += item;
              }

            } else {
              alert('ส่งสติกเกอร์ล้มเหลว');
            }
          }).catch(err => {
            console.error('ส่งผิดพลาด:', err);
            alert('เกิดข้อผิดพลาด');
          });
        }

        // เรียกเมื่อโหลดหน้า
        document.addEventListener("DOMContentLoaded", loadStickers);
    </script>
    <script>
        document.getElementById("chatSearch").addEventListener("input", function () {
            const searchText = this.value.toLowerCase();
            const chatItems = document.querySelectorAll("#chatItems li");

            chatItems.forEach(item => {
                const name = item.querySelector(".fw-bold")?.innerText.toLowerCase();
                if (name && name.includes(searchText)) {
                    item.style.display = "";
                } else {
                    item.style.display = "none";
                }
            });
        });
                document.getElementById("oaTokenForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const token = document.getElementById("oaTokenInput").value;

            fetch("/line-oa/add-token", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ token })
            }).then(res => {
                if (res.ok) {
                    alert("เพิ่ม Token สำเร็จ");
                    document.getElementById("oaTokenInput").value = "";
                    var modal = bootstrap.Modal.getInstance(document.getElementById("addOATokenModal"));
                    modal.hide();
                } else {
                    alert("เกิดข้อผิดพลาดในการเพิ่ม Token");
                }
            });
        });

    </script>

}

